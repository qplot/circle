<?php
/**
 * @file
 * Code for the Courses feature.
 */

include_once 'courses.features.inc';

/**
 * hook menu
 */
function courses_menu() {
  $items = array();
  
  $items['settings'] = array(
    'title' => 'Settings',
    'description' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('courses_settings'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['mycircle']  = array(
    'title' => 'My Network',
    'description' => '',
    'page callback' => 'courses_mycircle_page',
    'page arguments' => array(),
//    'access callback' => 'courses_mycircle_allowed',
    'access arguments' => array('view my circle'),
    'type' => MENU_CALLBACK,
  );
  $items['mycircle/%']  = array(
    'title' => 'My Network',
    'description' => '',
    'page callback' => 'courses_mycircle_overview',
    'page arguments' => array(1),
//    'access callback' => 'courses_is_circles_allowed',
//    'access arguments' => array(),
    'access arguments' => array('view all my circles'),
    'type' => MENU_CALLBACK,
  );
  $items['mycircle/advisors']  = array(
    'title' => 'My Network',
    'description' => '',
    'page callback' => 'courses_mycircle_display',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['for-advisors']  = array(
    'title' => 'For Advisors',
    'description' => '',
    'page callback' => 'courses_foradvisors_display',
    'page arguments' => array(),
//    'access callback' => 'courses_is_adviser_allowed',
    'access arguments' => array('view my profile'),
    'type' => MENU_CALLBACK,
  );
  $items['comments']  = array(
    'title' => 'For Advisors',
    'description' => '',
    'page callback' => 'courses_comments_display',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['faculty/%/settings'] = array(
    'title' => 'Photo Settings',
    'description' => 'Photo Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('photo_settings',1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['user/profile'] = array(
    'title' => 'Photo Profile',
    'description' => 'Photo Profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('course_user_profile'),
    // 'access callback' => TRUE,
//    'access callback' => 'courses_is_studentfaculty',
    'access arguments' => array('view my profile'),
    'type' => MENU_CALLBACK,
  );
  $items['user/profile/%'] = array(
    'title' => 'Photo Profile',
    'description' => 'Photo Profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('course_user_profile',2),
//   'access callback' => 'courses_is_profile_allowed',
    'access arguments' => array('view all profiles'),
    'type' => MENU_CALLBACK,
  );
  $items['shib/integrate'] = array(
    'title' => 'Shib integration',
    'description' => 'Integrate shib',
    'page callback' => 'courses_shib_integrate',
    'page arguments' => array(),
    'access arguments' => array('view all profiles'),
    'type' => MENU_CALLBACK,
  );
  $items['import-all'] = array(
    'page callback' => 'courses_import_all',
    'title' => 'Import tool',
    'access arguments' => array('view all profiles'),
    'type' => MENU_CALLBACK
  );
  $items['import-content'] = array(
    'title' => 'Import Content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('courses_import_form'),
    'access arguments' => array('view all profiles'),
    'type' => MENU_CALLBACK
  );
  $items['delete-content']  = array(
    'title' => 'Delete Content',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('courses_delete_form'),
    //'access callback' => TRUE,
    'access arguments' => array('view all profiles'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function courses_cron() {
  courses_import_all();
}


/**
 * hook theme
 */
function courses_theme() {
  $themes = array (
    'circle' => array(
      'template' => 'circle',
      'arguments' => array('courses')
    ),
    'instructors' => array(
      'template' => 'instructors',
    ),
    'advisors' => array(
      'template' => 'advisors',
    ),
    'for-advisors' => array(
      'template' => 'for-advisors',
    ),
    'comments' => array(
      'template' => 'comments'
    ),
  );
  return $themes;
}

/**
 * hook permission
 */
function courses_permission() {
  return array(
    'view my circle' => array(
      'title' => t('Allow to view my circle page'),
      'description' => t('Grant user to view their circle page when they log in.'),
    ),
    'view all my circles' => array(
      'title' => t('Allow to view all circle pages'),
      'description' => t('Grant user to view all students circle page.'),
    ),
    'view my profile' => array(
      'title' => t('Allow to view my profile page'),
      'description' => t('Grant user permission to view their profile page.'),
    ),
    'view all profiles' => array(
      'title' => t('Allow to view all profile pages'),
      'description' => t('Grant user permission to view all profile pages.'),
    ),
  );
}

function courses_foradvisors_display() {
  return theme('for-advisors');
}

function courses_comments_display() {
  return theme('comments');
}

function courses_is_studentfaculty($type) {
  global $user;
  // if you are not log in user
  if (empty($user->uid)) return FALSE;
  $user_data = user_load($user->uid);
  // if you don't have campus id
  if (empty($user_data->field_user_campusid)) return FALSE;
  // if you are not a student
  //dsm($user_data);
  if ($type == 'faculty') return !empty($user_data->field_user_title);
  else return empty($user_data->field_user_title);
  // dsm($student);
  // return $student;
  // dsm($user_data);
  // return TRUE;
  // find out the current loggin user
  // if he is student, return TRUE
  // if he is not, return FALSE
}
/**
 * check if user is admin or faculty
 */
function courses_is_adviser_allowed() {
  global $user;
  // if you are not log in user
  if (empty($user->uid)) return FALSE;
  // if you are admin
  if (in_array('administrator', array_values($user->roles))) return TRUE;
  if (in_array('manager', array_values($user->roles))) return TRUE;
  // if you are faculty  
  return courses_is_studentfaculty('faculty');
}

function courses_is_profile_allowed() {
  global $user;
  // if you are not log in user
  if (empty($user->uid)) return FALSE;
  // if you are admin
  if (in_array('administrator', array_values($user->roles))) return TRUE;
  if (in_array('manager', array_values($user->roles))) return TRUE;

  return FALSE;
}

function courses_is_circles_allowed() {
  global $user;
  // if you are not log in user
  if (empty($user->uid)) return FALSE;
  // if you are admin
  if (in_array('administrator', array_values($user->roles))) return TRUE;
  if (in_array('manager', array_values($user->roles))) return TRUE;

  return FALSE;
}

/**
 * permission control for user profile page 
 */
function courses_userprofile_allowed() {
  global $user;
  // if you are not log in user
  if (empty($user->uid)) return FALSE;
  $user_data = user_load($user->uid);
  // if you don't have campus id
  if (empty($user_data->field_user_campusid)) return FALSE;
  // if you are not a faculty
  return !empty($user_data->field_user_title);
}

/**
 * permission control for mycircle page
 */
function courses_mycircle_allowed() {
  global $user;
  // if you are not log in user
  if (empty($user->uid)) return FALSE;
  $user_data = user_load($user->uid);
  // if you don't have campus id
  if (empty($user_data->field_user_campusid)) return FALSE;
  // if you are a student
  return empty($user_data->field_user_title);
  // dsm($student);
  // return $student;
  // dsm($user_data);
  // return TRUE;
  // find out the current loggin user
  // if he is student, return TRUE
  // if he is not, return FALSE
}

/**
 * circle display page
 */
function courses_mycircle_page() {
  global $user;

  $user_data = user_load($user->uid);
  $campid = getSet($user_data->field_user_campusid['und']['0']['value']);

  if (!empty($campid)) {
    $courses = courses_find_instructors2($campid);
    $faculty = courses_find_faculty($campid);
    $housing = courses_find_housing($campid);
    $all = array_merge($courses, $faculty, $housing);
    $num = count($all);
    $radius = 280;
    $width = 90;
    $height = 90;
    //dpm($campid);
    return theme('instructors', array(
      'courses' => $courses, 
      'faculty' => $faculty, 
      'housing' => $housing,
      'num' => $num,
      'radius' => $radius,
      'width' => $width,
      'height' => $height,
      'student' => $user_data,
    ));
  }
  else return 'My Network page is only for Students. Please go to admin/students to view the student networks.';
}

/**
 * My circle page for each student
 */
function courses_mycircle_overview($uid) {
  $user_data = user_load($uid);
  $campid = getSet($user_data->field_user_campusid['und']['0']['value']);

  if (!empty($campid)) {
    $courses = courses_find_instructors2($campid);
    $faculty = courses_find_faculty($campid);
    $housing = courses_find_housing($campid);
    $all = array_merge($courses, $faculty, $housing);
    $num = count($all);
    $radius = 280;
    $width = 90;
    $height = 90;
    //return '123';
    return theme('instructors', array(
      'courses' => $courses, 
      'faculty' => $faculty, 
      'housing' => $housing,
      'num' => $num,
      'radius' => $radius,
      'width' => $width,
      'height' => $height,
      'student' => $user_data,
    ));
  }
  else return 'My Network page is only for Students. Please go to admin/students to view the student networks.';
}

/**
 * display circle page
 */
function courses_mycircle_display() {
  global $user;
  $courses = array();
  if(!empty($user->uid)) { // check is user is logged in
    $u = user_load($user->uid);
    //dsm($u);
    if(!in_array('administrator', $u->roles)) { // student logged in
      $campid = $u->field_user_campusid['und']['0']['value']?$u->field_user_campusid['und']['0']['value']:''; //determing campus id
      if(!empty($campid)) { // determine their courses with campus ID
        $courses = courses_find_instructors2($campid);
        $faculty = courses_find_faculty($campid);
        $housing = courses_find_housing($campid);
        // $instructors = courses_get_ins_info($campid);
        $all = array_merge($courses, $faculty, $housing);
        $num = count($all);
        if($num<8) {
          $radius = 275;
          $width = 105;
          $height = 105;
        }
        else {
          $radius = 280;
          $width = 90;
          $height = 90;
          return theme('instructors', array(
            'courses' => $courses, 
            'faculty' => $faculty, 
            'housing' => $housing,
            // 'instructors' => $instructors,
            'num' => $num,
            'radius' => $radius,
            'width' => $width,
            'height' => $height
          ));
        }

        //dsm($radius);
      }
      else { //bring them to register page if no campus ID
        return "Please click <a href='user/$u->uid/edit'>here</a> to register your campus ID.";
      }
    }

    // elseif(in_array('instructor', $u->roles)) { // Instructor logged in
    //   $insid = $u->field_user_campusid['und']['0']['value']?$u->field_user_campusid['und']['0']['value']:''; //determing campus id
    //   if(!empty($insid)) { // determine their courses with campus ID
    //     $students = courses_find_students($insid);
    //     //dsm($students);
    //   }
    //   return theme('instructor',array('students' => $students));
    // }

    else { // Non-student logged in
      $campid = arg(1);
      if (!empty($campid)) {
        $courses = courses_find_instructors2($campid);
        $faculty = courses_find_faculty($campid);
        $housing = courses_find_housing($campid);
        // $instructors = courses_get_ins_info($campid);
        $all = array_merge($courses, $faculty, $housing);
        $num = count($all);
        if($num<8) {
          $radius = 275;
          $width = 105;
          $height = 105;
          return theme('circle', array(
            'courses' => $courses, 
            'faculty' => $faculty, 
            'housing' => $housing,
            'num' => $num,
            'radius' => $radius,
            'width' => $width,
            'height' => $height,
          ));
        }
        else {
          $radius = 280;
          $width = 90;
          $height = 90;
          return theme('instructors', array(
            'courses' => $courses, 
            'faculty' => $faculty, 
            'housing' => $housing,
            // 'instructors' => $instructors,
            'num' => $num,
            'radius' => $radius,
            'width' => $width,
            'height' => $height
          ));
        }
      }
      else {drupal_goto($path = 'roster');}
    }
  }
  else { // not logged in
    return "Please click <a href='user'>here</a> to log in.";
  }
  // theme this page
  return theme('circle', array(
    'courses' => $courses, 
    'faculty' => $faculty, 
    'housing' => $housing,
    'num' => $num,
    'radius' => $radius,
    'width' => $width,
    'height' => $height,
    ));
}

/**
 * settings page
 */
function courses_settings($form, &$form_state) {
  watchdog(WATCHDOG_ALERT, 'form');
  $form['test'] = array(
    '#type' => 'textfield',
    // '#default_value' => variable_get('plusdelta_application_key', 'plusdelta123'),
    '#title' => t('Application Key'),
    '#description' => t('This field sets the application setting.'),
    '#size' => 40,
    '#maxlength' => 40,
    // '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * settings page submit
 */
function courses_settings_submit($form, &$form_state) {
  watchdog(WATCHDOG_ALERT, 'submit');
  $form_state['storage']['test'] = $form_state['values']['test'];
  // $form_state['redirect'] = FALSE;
}

/**
 * hook feeds after parse
 * refining of feeds import
 */
function courses_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
 // write a if here to make sure we capture the right feed.
  $import_id = $source->id;

  // import people
  if($import_id == 'people_import') {
    foreach ($result->items as &$value) {
      $raw_name = $value['name'];
      list($last, $first) = explode(", ", "$raw_name", 2);
      $value['fname'] = $first;
      $value['lname'] = $last;
    }
  }

  // import enrollment
  if($import_id == 'enroll_importer') {
    // dsm($result->items);
    foreach ($result->items as &$value) {
      courses_add_enrollment($value['class_nbr'], $value['netid']);
    }
  }

  // import student
  if ($import_id == 'roster_importer') {
    //dsm($result->items);

    foreach ($result->items as &$value) {
      if (!empty($value['class_nbr'])) {
        $course_id = courses_find_course($value['class_nbr']);
        // dsm($course_id);
        if ($course_id)
          $value['course'] = $course_id;
      }
    }
  }

  if ($import_id == 'faculty_importer') {
    foreach ($result->items as &$value) {
      if (empty($value['mail'])) {
        $value['mail'] = "noemail@duke.edu";
      }
    }
  }

  // if ($import_id == 'faculty_importer') {
  //   dsm($result->items);

  //   foreach ($result->items as &$value) {
  //     $campus_id = $value['campus_id'];
  //     //dsm($campus_id);
  //     $value['photo'] = "public://faculty/".$campus_id.".jpeg";
  //     dsm($value['photo']);
  //     if(file_exists($value['photo'])) {
  //       $campus_id = $value['campus_id'];
  //       $value['photo'] = "public://faculty/".$campus_id.".jpeg";
  //     }
  //     else {
  //       $value['photo'] = "public://faculty/placeholder.gif";
  //     }
  //     dsm($value['photo']);
  //   }
  //   dsm($result->items);
  // }
  if($import_id == 'housing_importer') {
    //dsm($result->items);

    // $tid = 5; // The term ID, you can't load by term name as such because multiple terms may have the same name within different (and even within the same) vocabularies.
    // $term = taxonomy_term_load($tid);
    foreach ($result->items as &$value) {
      $location = NULL;
      // find residence in location , if so, location = residence
      //dsm($residence);
      $residence = $value['residence_hall'];
      $neighborhood = $value['neighborhood'];
      //dsm(taxonomy_get_term_by_name($residence, 'location'));
      if (taxonomy_get_term_by_name($residence, 'location')) {
        $location = $residence; 
        //dsm($location);
      }
      // find neighborhood in location, if so, location = neighborhood
      elseif (taxonomy_get_term_by_name($neighborhood, 'location')) {
        $location = $neighborhood;
        //dsm($location);
      }
      $value['location'] = $location;
    }
    //dsm($result->items);

    // foreach ($result->items as &$value) {
    //   if (!empty($value['residence hall'])) {
    //     $location = $value['residence hall'];
    //   }
    //   elseif (!empty($value['neighborhood'])) {
    //     $location = $value['neighborhood'];
    //   }
    //   //dsm($location);
    //   if ($location) {
    //     $value['location'] = $location;
    //   }
    // }
    // //dsm($result->items);
  }

}

/**
 * find course id from nbr
 */
function courses_find_course($nbr) {
  // find course id
  $efq = new EntityFieldQuery();
  $result = $efq->entityCondition('entity_type', 'node')
  ->propertyCondition('type', 'class')
  ->fieldCondition('field_class_nbr', 'value', $nbr)
  ->execute();

  $cid = 0;
  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
    $cid = $keys[0];
  }

  return $cid;
}

function courses_add_enrollment($nbr = 0, $netid = 0) {

  // find course id
  $efq = new EntityFieldQuery();
  $result = $efq->entityCondition('entity_type', 'node')
  ->propertyCondition('type', 'course')
  ->fieldCondition('field_nbr', 'value', $nbr)
  ->execute();

  $cid = 0;
  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
    $cid = $keys[0];
  }

  // find people id
  $efq = new EntityFieldQuery();
  $result = $efq->entityCondition('entity_type', 'node')
  ->propertyCondition('type', 'people')
  ->fieldCondition('field_netid2', 'value', $netid)
  ->execute();

  $pid = 0;
  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
    $pid = $keys[0];
  }

  //dsm($cid . ' __ '. $pid);

  if ($cid && $pid) {
    // create an enrollment
    $node = new stdClass(); // Create a new node object
    $node->type = "enrolled"; // Or page, or whatever content type you like
    node_object_prepare($node); // Set some default values
    $node->title    = "Enrolled Manually";
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->field_course['und'][0]['target_id'] = $cid;
    $node->field_student['und'][0]['target_id'] = $pid;

    if($node = node_submit($node)) { // Prepare node for saving
        node_save($node);
    }  
    //dsm($node);
 } 
}

/**
 * hook feeds presave
 * preventing duplicate entry on feeds import enroll.
 */
function courses_feeds_presave(FeedsSource $source, $entity, $item) {
  if($source->id == 'housing_importer') {
    //dsm($entity);
    // // Skip saving this entity.
    // $entity->feeds_item->skip = TRUE;
      
  }
}

// 
function courses_find_instructors2($campus_id) {
  // using views to generate query data for us
  $view = views_get_view('roster');
  // give compus id argument to view
  $view->exposed_input['campus_id'] = $campus_id;
  $view->result;
  $view->execute();
  //dsm($view->result);

  // post process the data into our theme format
  // $courses = array (
  //   'student_campus_id' => '',
  //   'student_name',
  //   'course_name',
  //   'course_nbr',
  //   'instructor_name'
  // );
  $courses = array();
  foreach ($view->result as $value) {
    // sort out days for this course
    $days = array();
    foreach ($value->field_field_class_days as $v2) {
      $days[] = $v2['raw']['value'];
    }
    $days = implode(' ', $days);

    $office = array();
    foreach ($value->field_field_user_address as $v3) {
      $office[] = $v3['raw']['value'];
    }
    $office = implode('<br/>', $office);

    $mailing = array();
    foreach ($value->field_field_user_pobox as $v4) {
      $mailing[] = $v4['raw']['value'];
    }
    $mailing = implode('<br/>', $mailing);

    //dsm($value);
    // assemble a photo path
    // find instructor photosettings
    // $photosettings = !empty($value->field_field_user_photosetting['0']['raw']['value'])?$value->field_field_user_photosetting['0']['raw']['value']:'0';

    // if ($photosettings == '0') {
    //   $campus_id= getSet($value->field_field_user_campusid_1[0]['raw']['value']);
    //   $photo = "public://faculty/". $campus_id .".jpeg";
    //   $photo_path = file_create_url($photo);      
    // }
    // if ($photosettings == '1') {
    //   $photo = "public://faculty/placeholder.gif";
    //   $photo_path = file_create_url($photo);      
    // }
    // if ($photosettings == '2') {
    //   $photo = !empty($value->field_field_user_photo[0]['raw']['uri'])?$value->field_field_user_photo[0]['raw']['uri']:'public://faculty/placeholder.gif';
    //   $photo_path = file_create_url($photo); 
    // }
    $photo_path = courses_get_photo_path(
      getSet($value->field_field_user_campusid_1[0]['raw']['value']),
      getSet($value->field_field_user_photo[0]['raw']['uri']), 
      getSet($value->field_field_user_photosetting['0']['raw']['value'], '0')
    );

    // assemble the final course
    $courses[] = array(
      'Campus ID' => $value->field_field_user_campusid['0']['raw']['value'],
      'Course NBR' => $value->field_field_roster_classnbr['0']['raw']['value'],
      'Course Name' => $value->node_field_data_field_roster_course_title,
      'Node ID' => $value->nid,
      'Days' => $days,
      'Start Time' => !empty($value->field_field_class_starttime['0']['raw']['value'])?$value->field_field_class_starttime['0']['raw']['value']:'',
      'End Time' => !empty($value->field_field_class_endtime['0']['raw']['value'])?$value->field_field_class_endtime['0']['raw']['value']:'',
      'Building' => !empty($value->field_field_class_building['0']['raw']['value'])?$value->field_field_class_building['0']['raw']['value']:'',
      'Room' => !empty($value->field_field_class_room['0']['raw']['value'])?$value->field_field_class_room['0']['raw']['value']:'',
      'Instructor Name' => !empty($value->field_field_user_displayname_1[0]['raw']['value'])?$value->field_field_user_displayname_1[0]['raw']['value']:'',
      'Instructor ID' => !empty($value->field_field_user_campusid_1[0]['raw']['value'])?$value->field_field_user_campusid_1[0]['raw']['value']:'',
      'Instructor Pic' => !empty($value->field_field_user_photo[0]['raw']['uri'])?$value->field_field_user_photo[0]['raw']['uri']:'',
      'Office' => $office,
      'Mailing' => $mailing,
      'Telephone' => !empty($value->field_field_user_telephone[0]['raw']['value'])?$value->field_field_user_telephone[0]['raw']['value']:'',
      'Email' => !empty($value->users_field_data_field_class_instructorid_mail)?$value->users_field_data_field_class_instructorid_mail:'',
      'Type' => 'Instructor',
      'Photo Path' => $photo_path,
    );
  }
  // if string unique (for loop)
  // another for loop for 

  $uniques = array();
  foreach ($courses as $obj) {
      $uniques[$obj['Course Name']] = $obj;
  }
  $courses = $uniques;
  return $courses;
}

function courses_find_faculty($campus_id) {
  $viewa = views_get_view('advisors');
  $viewa->exposed_input['title'] = $campus_id;
  $viewa->result;
  $viewa->execute();
  //dsm($viewa->result);

  $faculty = array();
  foreach ($viewa->result as $value) {
    //assemble the final course
    $officea = array();
    foreach ($value->field_field_user_address as $v3) {
      $officea[] = $v3['raw']['value'];
    }
    $officea = implode('<br/>', $officea);

    $mailinga = array();
    foreach ($value->field_field_user_pobox as $v4) {
      $mailinga[] = $v4['raw']['value'];
    }
    $mailinga = implode('<br/>', $mailinga);

    $officed = array();
    foreach ($value->field_field_user_address_1 as $v5) {
      $officed[] = $v5['raw']['value'];
    }
    $officed = implode('<br/>', $officed);

    $mailingd = array();
    foreach ($value->field_field_user_pobox_1 as $v6) {
      $mailingd[] = $v6['raw']['value'];
    }
    $mailingd = implode('<br/>', $mailingd);

    $photo_path = courses_get_photo_path(
      getSet($value->field_field_advisors_advisor_campusid[0]['raw']['value']),
      getSet($value->field_field_user_photo[0]['raw']['uri']), 
      getSet($value->field_field_user_photosetting['0']['raw']['value'], '0')
    );

    $photo_path_1 = courses_get_photo_path_1(
      getSet($value->field_field_advisors_dean_campusid[0]['raw']['value']),
      getSet($value->field_field_user_photo_1[0]['raw']['uri']), 
      getSet($value->field_field_user_photosetting['0']['raw']['value'], '0')
    );

    $faculty[] = array(
      array(
        'Advisor ID' => !empty($value->field_field_advisors_advisor_campusid['0']['raw']['value'])?$value->field_field_advisors_advisor_campusid['0']['raw']['value']:'',
        'Advisor' => !empty($value->field_field_user_displayname_1['0']['raw']['value'])?$value->field_field_user_displayname_1['0']['raw']['value']:'',
        'Advisor Pic' => !empty($value->field_field_user_photo['0']['raw']['uri'])?$value->field_field_user_photo['0']['raw']['uri']:'',
        'Advisor Office' => $officea,
        'Advisor Mailing' => $mailinga,
        'Advisor Telephone' => !empty($value->field_field_user_telephone['0']['raw']['value'])?$value->field_field_user_telephone['0']['raw']['value']:'',
        'Advisor Email' => !empty($value->users_field_data_field_advisors_advisor_mail)?$value->users_field_data_field_advisors_advisor_mail:'',
        'Advisor Photo' => !empty($value->field_field_user_photo['0']['raw']['uri'])?$value->field_field_user_photo['0']['raw']['uri']:'',
        'Type' => 'AcademicAdvisor',
        'Photo Path' => $photo_path,
      ),
      array(
        'Dean ID' => !empty($value->field_field_advisors_dean_campusid['0']['raw']['value'])?$value->field_field_advisors_dean_campusid['0']['raw']['value']:'',
        'Dean' => !empty($value->field_field_user_displayname_2['0']['raw']['value'])?$value->field_field_user_displayname_2['0']['raw']['value']:'',
        'Dean Pic' => !empty($value->field_field_user_photo_1['0']['raw']['uri'])?$value->field_field_user_photo_1['0']['raw']['uri']:'',
        'Dean Office' => $officed,
        'Dean Mailing' => $mailingd,
        'Dean Telephone' => !empty($value->field_field_user_telephone_1['0']['raw']['value'])?$value->field_field_user_telephone_1['0']['raw']['value']:'',
        'Dean Email' => !empty($value->users_field_data_field_advisors_dean_mail)?$value->users_field_data_field_advisors_dean_mail:'',
        'Dean Photo' => !empty($value->field_field_user_photo_1['0']['raw']['uri'])?$value->field_field_user_photo_1['0']['raw']['uri']:'',
        'Type' => 'AcademicDean',
        'Photo Path' => $photo_path_1,
      ),
    );


  }
   //dsm($faculty); 

  return $faculty;
}

function courses_find_housing($campus_id) {
  $viewl = views_get_view('housing');
  // give compus id argument to view
  $viewl->exposed_input['campus_id'] = $campus_id;
  $viewl->result;
  $viewl->execute();
  //dsm($viewl->result);
  $housing = array();
  foreach ($viewl->result as $value) {

    $officel = array();
    foreach ($value->field_field_user_address as $v3) {
      $officel[] = $v3['raw']['value'];
    }
    $officel = implode('<br/>', $officel);

    $mailingl = array();
    foreach ($value->field_field_user_pobox as $v4) {
      $mailingl[] = $v4['raw']['value'];
    }
    $mailingl = implode('<br/>', $mailingl);

    $officer = array();
    foreach ($value->field_field_user_address_1 as $v5) {
      $officer[] = $v5['raw']['value'];
    }
    $officer = implode('<br/>', $officer);

    $mailingr = array();
    foreach ($value->field_field_user_pobox_1 as $v6) {
      $mailingr[] = $v6['raw']['value'];
    }
    $mailingr = implode('<br/>', $mailingr);

    $photo_path = courses_get_photo_path(
      getSet($value->field_field_user_campusid[0]['raw']['value']),
      getSet($value->field_field_user_photo[0]['raw']['uri']), 
      getSet($value->field_field_user_photosetting['0']['raw']['value'], '0')
    );
    $photo_path_1 = courses_get_photo_path_1(
      getSet($value->field_field_user_campusid_1[0]['raw']['value']),
      getSet($value->field_field_user_photo_1[0]['raw']['uri']), 
      getSet($value->field_field_user_photosetting['0']['raw']['value'], '0')
    );

    $housing[] = array(
        array(
          'Librarian ID' => !empty($value->field_field_user_campusid['0']['raw']['value'])?$value->field_field_user_campusid['0']['raw']['value']:'',
          'Librarian' => !empty($value->field_field_user_displayname_1['0']['raw']['value'])?$value->field_field_user_displayname_1['0']['raw']['value']:'',
          'Librarian Office' => $officel,
          'Librarian Mailing' => $mailingl,
          'Librarian Telephone' => !empty($value->field_field_user_telephone['0']['raw']['value'])?$value->field_field_user_telephone['0']['raw']['value']:'',
          'Librarian Email' => !empty($value->users_field_data_field_librarian_campusid_mail)?$value->users_field_data_field_librarian_campusid_mail:'',
          'Librarian Photo' => !empty($value->field_field_user_photo['0']['raw']['uri'])?$value->field_field_user_photo['0']['raw']['uri']:'',
          'Type' => 'Librarian',
          'Location' => !empty($value->field_field_housing_location['0']['raw']['taxonomy_term']->name)?$value->field_field_housing_location['0']['raw']['taxonomy_term']->name:'',
          'Photo Path' => $photo_path,
        ),
        array(
          'Residence ID' => !empty($value->field_field_user_campusid_1['0']['raw']['value'])?$value->field_field_user_campusid_1['0']['raw']['value']:'',
          'Residence' => !empty($value->field_field_user_displayname_2['0']['raw']['value'])?$value->field_field_user_displayname_2['0']['raw']['value']:'',
          'Residence Office' => $officer,
          'Residence Mailing' => $mailingr,
          'Residence Telephone' => !empty($value->field_field_user_telephone_1['0']['raw']['value'])?$value->field_field_user_telephone_1['0']['raw']['value']:'',
          'Residence Email' => !empty($value->users_field_data_field_residence_campusid_mail)?$value->users_field_data_field_residence_campusid_mail :'',
          'Residence Photo' => !empty($value->field_field_user_photo_1['0']['raw']['uri'])?$value->field_field_user_photo_1['0']['raw']['uri']:'',
          'Type' => 'Faculty in Residence',
          'Location' => !empty($value->field_field_housing_location['0']['raw']['taxonomy_term']->name)?$value->field_field_housing_location['0']['raw']['taxonomy_term']->name:'',
          'Photo Path' => $photo_path_1,
        ),
      );
  }
  //dsm($housing);
return $housing;
}

// function courses_find_students($campus_id) {
//   // using views to generate query data for us
//   $view = views_get_view('roster');
//   // give campus id argument to view
//   $view->exposed_input['instructor_id'] = $campus_id;
//   $view->result;
//   $view->execute();
//   //dsm($view->result);
//   //dsm($view->exposed_input['instructor_id']);


//   // post process the data into our theme format
//   // $courses = array (
//   //   'student_campus_id' => '',
//   //   'student_name',
//   //   'course_name',
//   //   'course_nbr',
//   //   'instructor_name'
//   // );
//   $students = array();
//   foreach ($view->result as $value) {
//     $students[] = array(
//       'Campus ID' => $value->field_field_roster_campusid['0']['raw']['value'],
//       'Student Name' => $value->node_title, 
//       'Course NBR' => $value->field_field_roster_classnbr['0']['raw']['value'],
//       'Course Name' => $value->node_field_data_field_roster_course_title,
//       'Instructor Name' => !empty($value->field_field_class_instructor[0]['raw']['value'])?$value->field_field_class_instructor[0]['raw']['value']:'',
//       'Instructor ID' => !empty($value->field_field_class_instructorid[0]['raw']['value'])?$value->field_field_class_instructorid[0]['raw']['value']:'',
//       'Node ID' => $value->nid,
//     );
//   }
//    //dsm($students);
//   return $students;
// }
// function getSet(&$var) {
//   if (!empty($var))
//     return $var;
//   else return '';
// }

// function courses_get_ins_info($campus_id) {
//   $viewu = views_get_view('users');
//   // give compus id argument to view
//   $viewu->exposed_input['campus_id'] = $campus_id;
//   $viewu->result;
//   $viewu->execute();
//   dsm($viewu->result);
//   $housing = array();
//   foreach ($viewu->result as $value) {
//     $housing[] = array(
//         array(
//           'Librarian ID' => !empty($value->field_field_librarian_campusid['0']['raw']['value'])?$value->field_field_librarian_campusid['0']['raw']['value']:'',
//           'Librarian' => !empty($value->field_field_librarian_fullname['0']['raw']['value'])?$value->field_field_librarian_fullname['0']['raw']['value']:'',
//           'Type' => 'Librarian',
//         ),
//       );
//   }
//   //dsm($housing);
// return $housing;
// }



// load instructors from mysql directly
function courses_find_instructors($campus_id) {
  $query = "
SELECT node.nid AS nid, node.title AS node_title, node_field_data_field_roster_course.title AS node_field_data_field_roster_course_title, node_field_data_field_roster_course.nid AS node_field_data_field_roster_course_nid, node.created AS node_created, field_data_field_class_instructor.field_class_instructor_value AS instructor_name, field_data_field_roster_campusid.field_roster_campusid_value AS campus_id, 'node' AS field_data_field_roster_campusid_node_entity_type, 'node' AS field_data_field_roster_classnbr_node_entity_type, 'node' AS field_data_field_class_instructor_node_entity_type
FROM 
{node} node
LEFT JOIN {field_data_field_roster_course} field_data_field_roster_course ON node.nid = field_data_field_roster_course.entity_id AND (field_data_field_roster_course.entity_type = 'node' AND field_data_field_roster_course.deleted = '0')
LEFT JOIN {node} node_field_data_field_roster_course ON field_data_field_roster_course.field_roster_course_target_id = node_field_data_field_roster_course.nid
LEFT JOIN field_data_field_class_instructor ON 
  field_data_field_class_instructor.entity_id = 
  node_field_data_field_roster_course.nid
LEFT JOIN field_data_field_roster_campusid ON 
  field_data_field_roster_campusid.entity_id = 
  node.nid
WHERE (( (node.status = '1') AND (node.type IN  ('roster')) AND ( field_data_field_roster_campusid.field_roster_campusid_value = '{$campus_id}' ) ))
ORDER BY node_created DESC
LIMIT 2 OFFSET 0
  ";

  $result = db_query($query);
  foreach ($result as $record) {
    //dsm($record);
  }
}


/**
 * template override
 */

// function courses_preprocess_circle(&$var) {
//   $all = array_merge($courses, $faculty, $housing);
//   $num = count($all);
//   if($num<10) {
//     $radius = 250;
//   }
//   else {
//     $radius = 310;
//   }
//   if($num<10) {
//     $width = 105;
//     $height = 105;
//   }
//   else {
//     $width = 98;
//     $height = 98;
//   }

//   $var['radius'] = $radius;
//   $var['width'] = $width;
//   $var['height'] = $height;

// }


/**
*function shib_settings() {
*  $form['switch'] = array(
*    '#type' => 'radios',
*    '#title' => t('Switch On/Off'),
*    '#options' => array(t('On'),t('Off')),
*    '#description' => t('Turn Shib on or off'),
*    '#default_value' => variable_get('switch'),
*  );
*  $form['submit'] = array(
*    '#type' => 'submit',
*    '#value' => 'Submit',
*  );
*  return $form;
*}
*
*function shib_settings_submit($form, &$form_state) {
*  variable_set("switch",$form_state['values']['switch']);
*  drupal_set_message(t("Shib has been turned on/off"));
*}
**/

/**
* Admin page for photo settings
*/
function photo_settings($form, &$form_state) {
  $uid = arg(1);
  $luser = user_load($uid);
  $campusid = $luser->name;
  //dsm($luser);
  $cardphoto = "public://faculty/".$campusid.".jpeg";
  $cardphoto = file_create_url($cardphoto);
  $nophoto = "public://faculty/placeholder.gif";
  $nophoto = file_create_url($nophoto);
  if(empty($luser->field_user_photosetting['und']['0']['value'])) {$setting=0;}
  else {$setting = $luser->field_user_photosetting['und']['0']['value'];}

  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['photo'] = array(
    '#type' => 'radios',
    '#options' => array('0' => "<img src='$cardphoto' width='120px' />", '1' => 'No Photo','2' => "Upload"),
    '#default_value' => $setting,
  );
  $form['upload'] = array(
    '#type' => 'managed_file',
    '#title' => t('Upload Photo'),
    '#upload_location' => 'public://faculty/',
  );
  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $uid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * settings page submit
 */
function photo_settings_submit($form, &$form_state) {
  variable_set("uid",$form_state['values']['uid']);
  $luser = user_load(variable_get("uid"));
  variable_set("setting",$form_state['values']['photo']);
  $setting = variable_get("setting");
  if ($setting==0) {
    $edit = array(
      'field_user_photosetting' => array(
        'und' => array(
          0 => array(
            'value' => $setting,
          ),
        ),
      ),
    );
    user_save($luser, $edit);
    drupal_set_message(t('Using Duke Card Photo'));
  }
  elseif ($setting==1) {
    $edit = array(
      'field_user_photosetting' => array(
        'und' => array(
          0 => array(
            'value' => $setting,
          ),
        ),
      ),
    );
    user_save($luser, $edit);
    drupal_set_message(t('Using No Photo'));
  }
  elseif ($setting==2) {
    $edit = array(
      'field_user_photosetting' => array(
        'und' => array(
          0 => array(
            'value' => $setting,
          ),
        ),
      ),
    );
    user_save($luser, $edit);
    drupal_set_message(t('Using Uploaded Photo'));
  }
}

/**
 * Variation of isset
 */
function getSet(&$v, $default = '') {
  return isset($v) ? $v : $default;
}

function course_user_profile($form, &$form_state, $uid = 0) {
  // figure out the user
  if (empty($uid)) {
    global $user;
    $uid = $user->uid;
    //dpm($user);

    // $edit = array(
    //   'field_user_photosetting' => array(
    //     'und' => array(
    //       0 => array(
    //         'value' => $setting,
  }
  $user_data = user_load($uid);
  //dpm($user_data);
  if (empty($user_data->field_user_campusid))
    drupal_goto("comments");
  else
  $photo = getSet($user_data->field_user_photosetting['und'][0]['value'],0);
  //dpm($user_data);
  // user default photo path
  if ($uid == 1)
    $user_data->name = '0001255';
  $photo_path = "private://images-staff/". $user_data->name . ".jpeg";
  $default_photo = theme('image', array(
    'path' => file_create_url($photo_path),
    'width' => '120px'
  ));
  $photo_path = "public://default_images/placeholder.gif";
  $no_photo = theme('image', array(
    'path' => file_create_url($photo_path),
    'width' => '120px'
  ));
  $photo_path = getSet($user_data->field_user_photo['und'][0]['uri']);
  $user_photo = $photo_path ? theme('image', array(
    'path' => file_create_url($photo_path),
    'width' => '120px'
  )) : '';

  // display name of user in profile page
  $cname = getSet($user_data->field_user_commonname['und'][0]['value'],0);

  // last edited timestamp
  $utime = getSet($user_data->field_user_edited['und'][0]['value'],0);

  // logged in user name
  $editor = getSet($user_data->field_user_editedby['und'][0]['value'],'');
    //dpm($editor_uid);
  if (!empty($utime))
    $edited_time = 'Last edited at ' . date('l jS \of F Y h:i:s A', $utime) . ' by ' . $editor;
  else 
    $edited_time = '';

  $form['caption'] = array(
    '#markup' => "<h1>{$cname}'s Profile </h1><p>For more information on changing your profile, including your contact information, <a href=\"/for-advisors\">click here</a>.</p>" . $edited_time,
    //'#type' => $cname,
  );


  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $uid,
  );
  $form['photo'] = array(
    '#type' => 'radios',
    '#options' => array('0' => "Default Photo <br />" . $default_photo, '1' => 'No Photo <br />' . $no_photo,'2' => "Custom Photo <br />" . $user_photo),
    '#default_value' => $photo,
  );
  $form['image'] = array(
    '#name' => 'files[fileupload]',
    '#type' => 'file',
    '#title' => 'Change custom photo',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;  
}

/**
 * user profile form submit
 */


/**
*User Profile Form 8-27
*/
function course_user_profile_submit($form, &$form_state) {
  //dsm($form_state['values']);
  //dsm($_FILES);
  // save the photo settings to field photosettings
  if ($userinfo = user_load($form_state['values']['uid'])) {
    // save photo setting
    $photosetting = $form_state['values']['photo'];
    $photo['field_user_photosetting']['und'][0]['value'] = $photosetting;
    $photo['field_user_edited']['und'][0]['value'] = time();
    global $user;
    $photo['field_user_editedby']['und'][0]['value'] = $user->name;
     //dpm($photo);

    // save photo
    if (!empty($_FILES['files']['name']['fileupload'])) {
      //dsm('fileupload');
      $file = file_save_upload('fileupload', array(), 'public://card-photo');
      $file->status = 1;
      file_save($file);
      $photo['field_user_photo']['und'][0] = (array)$file;
      $photos[2] = $file->uri;
    }

    // deal with drupal user save bug
    if (empty($userinfo->field_user_photo['und'][0]['uri']))
      $userinfo->field_user_photo = array();
    //dsm($user);
    user_save($userinfo, $photo);
  }

  return;
}

/**
 * hook_pre_build
 */
// function courses_views_pre_build(&$view) {
//   if ($view->name == 'my_faculty') {
//   }
// }

/**
 * hook_pre_view
 */
function courses_views_pre_render(&$view) {
  if ($view->name == 'my_faculty') {
    // dsm($view->result);
    foreach($view->result as &$item) {
      // find the path of the file
      // $photos = array(
      //   "public://faculty/". $item->users_name . ".jpeg",
      //   "public://default_images/placeholder.gif",
      //   getSet($item->field_field_user_photo[0]['raw']['uri'])
      // );
      // $photosetting = getSet($item->field_field_user_photosetting[0]['raw']['value'],'0');
      // $photo = $photos[$photosetting];
      // if (empty($photo)) $photo = $photos[1];
      $photo = courses_get_photo_path($item->users_name, 
        $item->field_field_user_photo[0]['raw']['uri'], 
        $item->field_field_user_photosetting[0]['raw']['value']);

      $item->field_field_user_photopath = array(
        array(
          'rendered' => array(
            '#markup' => file_create_url($photo),
            '#access' => TRUE
          )
        )
      );
    }
  }

  if ($view->name == 'my_students') {
    //dsm($view->result);
    foreach ($view->result as &$item) {

      $photo = 'private://images-students/' . $item->users_name . '.jpeg';

      $item->field_field_user_title = array(
        array(
          'rendered' => array(
            '#markup' => file_create_url($photo),
            '#access' => TRUE
          )
        )
      );
      //dsm($item);

    }
  }
}

/**
 * find photo path
 */
function courses_get_photo_path($campus_id, $upload, $choice) {
  $photos = array(
    "private://images-staff/". $campus_id . ".jpeg",
    "public://default_images/placeholder.gif",
    getSet($upload)
  );
  $photosetting = getSet($choice,'0');
  $photo = $photos[$photosetting];
  if (empty($photo)) $photo = $photos[1];
    //dpm($choice);
  return file_create_url($photo);
}

function courses_get_photo_path_1($campus_id, $upload, $choice) {
  $photos = array(
    "private://images-staff/". $campus_id . ".jpeg",
    "public://default_images/placeholder.gif",
    getSet($upload)
  );
  $photosetting = getSet($choice,'0');
  $photo = $photos[$photosetting];
  if (empty($photo)) $photo = $photos[1];
    //dpm($choice);
  return file_create_url($photo);
}


// function courses_get_photo_path_2($campus_id, $upload, $choice) {
//   $photos = array(
//     "public://student/". $campus_id . ".jpeg",
//     "public://default_images/placeholder.gif",
//     getSet($upload)
//   );
//   $photosetting = getSet($choice,'0');
//   $photo = $photos[$photosetting];
//   if (empty($photo)) $photo = $photos[1];
//     //dpm($choice);
//   return file_create_url($photo);
// }

function courses_shib_integrate() {
  $query="INSERT INTO shib_authmap (uid, targeted_id) SELECT uid, name FROM users WHERE uid > 1 AND (uid) NOT IN (SELECT uid FROM shib_authmap);";
  $result=db_query($query);
  $query="INSERT INTO authmap (uid, authname) SELECT uid, targeted_id FROM shib_authmap WHERE (uid) NOT IN (SELECT uid FROM authmap);";
  $result=db_query($query);
  $query="UPDATE authmap SET module = 'shib_auth' WHERE (uid) IN (SELECT uid FROM shib_authmap);";
  $result=db_query($query);

  drupal_set_message(t('Shib integration has been applied to all users including faculty and students.'));
  drupal_goto("", array());
}

function courses_file_download($uri) {
  // Check if the file is controlled by the current module.
  if (!file_prepare_directory($uri)) {
      $info = image_get_info($uri);
      return array('Content-Type' => $info['mime_type']);
  } else 
  return -1;
}


/*
  Auto Import Function
 */
function courses_import_all() {
  $myFeed = feeds_source('student_importer');
  while (FEEDS_BATCH_COMPLETE != $myFeed->import());
  $myFeed = feeds_source('faculty_importer');
  while (FEEDS_BATCH_COMPLETE != $myFeed->import());
  $myFeed = feeds_source('class_importer');
  while (FEEDS_BATCH_COMPLETE != $myFeed->import());
  $myFeed = feeds_source('roster_importer');
  while (FEEDS_BATCH_COMPLETE != $myFeed->import());
  $myFeed = feeds_source('advisor_importer');
  while (FEEDS_BATCH_COMPLETE != $myFeed->import());
  $myFeed = feeds_source('librarian_importer');
  while (FEEDS_BATCH_COMPLETE != $myFeed->import());
  $myFeed = feeds_source('residence_importer');
  while (FEEDS_BATCH_COMPLETE != $myFeed->import());
  $myFeed = feeds_source('housing_importer');
  while (FEEDS_BATCH_COMPLETE != $myFeed->import());
 
  watchdog('advising', 'import is done.');

  return t('Import successfull');
  // $file = contacttest.csv;
  // $myFeed = feeds_source('test_importer');
  // $config = array('FeedsFileFetcher'=>array('source'=>'sites/all/modules/courses/william909/' . $file));
  // $myFeed->addConfig($config);
  // while (FEEDS_BATCH_COMPLETE != $myFeed->import());

 
}


// function courses_remove_all() {  
//   //deletes all users except for super admin
//   $z = delete_all_users_delete();
//   //displays number of users deleted
//   drupal_set_message('users deleted:' . $z);
//   //deletes content
//   $a = _delete_all_normal(0, array('roster'), array());  //displays number of content "nodes" deleted
//    drupal_set_message('Roster nodes deleted:' . $a['nodes']);
//   $b = _delete_all_normal(0, array('advisors'), array());  //displays number of content "nodes" deleted
//    drupal_set_message('Advisor nodes deleted:' . $b['nodes']);
//   $c = _delete_all_normal(0, array('class'), array());  //displays number of content "nodes" deleted
//    drupal_set_message('Class nodes deleted:' . $c['nodes']);
//   $d = _delete_all_normal(0, array('librarian'), array());  //displays number of content "nodes" deleted
//    drupal_set_message('Librarian nodes deleted:' . $d['nodes']);
//   $e = _delete_all_normal(0, array('residence'), array());  //displays number of content "nodes" deleted
//    drupal_set_message('Residence nodes deleted:' . $e['nodes']);
//   $e = _delete_all_normal(0, array('housing'), array());  //displays number of content "nodes" deleted
//    drupal_set_message('Housing nodes deleted:' . $e['nodes']);
//   return t('Content successfully removed.');
// }

function courses_import_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Import Content',
  );
  return $form;
}

function courses_import_form_submit($form, &$form_state) {
  courses_import_all();
}


/**
 * delete all content relevent to our application
 */
function courses_delete_form($form, &$form_state) {
  $form['delete'] = array(
    '#type' => 'radios',
    '#title' => t('Content Type:'),
    '#options' => array(0 => t('Users'), 1 => t('Classes'), 2=>t('Advisors'), 3=>t('Roster'), 4=>t('Librarian'), 5=>t('Faculty Residence'), 6=>t('Residence'), 7=>t('All Content'),),
    '#description' => t('<b>Warning: </b>Once deleted, information can not be recovered. <br />Deletion make take 1-10 minutes depending on the content.'),
    //'#default_value' => variable_get('a'),
  );
  $form['check'] = array(
    '#type' => 'textfield',
    '#title' => t('Type "delete" to confirm deletion of content'),
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Delete',
  );
  return $form;
}

function courses_delete_form_submit($form, &$form_state) {
  $type = $form_state['values']['delete'];
  $check = $form_state['values']['check'];
  //dsm($type);
  //dsm($type);
  if ($check=='delete') {
    if ($type==0) {
      courses_users_remove_all();
    }
    elseif ($type==1) {
      $d = _delete_all_normal(0, array('class'), array());
      drupal_set_message("Classes Content Deleted: " . $d['nodes']);
    }
    elseif ($type==2) {
      $d = _delete_all_normal(0, array('advisors'), array());
      drupal_set_message("Advisors Content Deleted: " . $d['nodes']);
    }
    elseif ($type==3) {
      $d = _delete_all_normal(0, array('roster'), array());
      drupal_set_message("Roster Content Deleted: " . $d['nodes']);
    }
    elseif ($type==4) {
      $d = _delete_all_normal(0, array('librarian'), array());
      drupal_set_message("Librarian Content Deleted: " . $d['nodes']);
    }
    elseif ($type==5) {
      $d = _delete_all_normal(0, array('residence'), array());
      drupal_set_message("Faculty Residence Content Deleted: " . $d['nodes']);
    }
    elseif ($type==6) {
      $d = _delete_all_normal(0, array('housing'), array());
      drupal_set_message("Residence Deleted: " . $d['nodes']);
    }
    elseif ($type==7) {
      $d = _delete_all_normal(0, array(), array());
      drupal_set_message("Content Deleted: " . $d['nodes']);
    }
  }
  else {
    drupal_set_message('Please type "delete" to confirm deletion of content', 'error');
  }
  //variable_set('a',$form_state['values']['delete']);
  // $form_state['redirect'] = FALSE;
}

function courses_users_remove_all() {
  $c = delete_all_users_delete();
  drupal_set_message("User(s) deleted: " . $c);
}